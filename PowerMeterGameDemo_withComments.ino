#include <Adafruit_CircuitPlayground.h>

#define BUTTON_A_PIN 4
#define BUTTON_B_PIN 5
#define SWITCH_PIN 7

int level = 1; // set level 1
bool gameOn = true; // game starts as on
bool ballHitTheTarget = false; // flag for hitting the target
unsigned long previousTime = 0; // time tracking for LED movement
long interval = 500; // initial interval for LED movement
int blueLEDPin = 0; // starting position of the blue LED
bool movingRight = true; // direction of LED movement
bool buttonAPressed = false; // flag for button A press
bool buttonBPressed = false; // flag for button B press

// speech demo
const uint8_t spBRAVO[]         PROGMEM = {0x61,0x5A,0xBA,0xC2,0xDD,0x62,0x85,0xD6,0xE8,0x15,0x59,0xB1,0x97,0x9A,0x30,0xD5,0xBC,0x85,0xDF,0xA8,0x63,0x0F,0xE9,0x50,0xE5,0xA7,0xCA,0x6E,0x22,0x5D,0x57,0xEF,0x72,0x97,0xB3,0x2A,0x6D,0x74,0x15,0xE9,0xBA,0x3A,0xF6,0x66,0xE8,0x3E,0xD4,0x5C,0x65,0xD7,0x31,0x2D,0x95,0x54,0xBB,0x8B,0xDF,0xD9,0xAE,0xB1,0xA1,0xAC,0x0E,0x51,0x3F,0xE7,0xB6,0x14,0xD2,0x35,0x4E,0xEE,0xFB,0x5E,0x77,0xB3,0x7B,0xDF,0x19,0x2C,0x7D,0xEC,0xE9,0x2F,0x73,0x05,0xDF,0x19,0x2C,0x7D,0xF8,0xF3,0xFF};
const uint8_t spSTART[]         PROGMEM = {0x04,0xF8,0xC5,0x9C,0x03,0x1A,0xD0,0x80,0x04,0x38,0x00,0x06,0x58,0x22,0x7D,0x65,0x9D,0x87,0x8B,0x5B,0xD7,0x53,0x67,0x37,0x96,0x21,0x79,0x6F,0x7D,0xEB,0xD5,0x64,0xB7,0x92,0x43,0x9B,0xC7,0x50,0xDD,0x92,0x1D,0xF7,0x9E,0x53,0xDF,0xDD,0x59,0xCB,0x21,0xAD,0xF6,0x46,0xA0,0x08,0xE5,0x2E,0x22,0x1B,0x40,0x01,0xDD,0xB2,0x2A,0xE0,0xB7,0x0C,0x03,0x4C,0x9D,0x4A,0x80,0xEA,0x54,0xFE,0x1F};
const uint8_t spPHASE[]         PROGMEM = {0x22,0x5E,0x2E,0xD5,0xC4,0x64,0xA5,0xF6,0x9A,0x52,0x26,0xF1,0xB6,0xDA,0xEA,0x54,0x2C,0x6B,0xCE,0x69,0x7A,0x0A,0x51,0x89,0xB7,0xA7,0x19,0xA9,0x98,0xCD,0xDE,0xDC,0xE6,0x36,0xAB,0x9B,0xA1,0x11,0x23,0x3E,0xCF,0xB1,0xAF,0x7D,0xAB,0x7B,0x3C,0xFC,0x19,0x9E,0xA6,0x55,0x9C,0x6D,0xB7,0x7F,0xEC,0xCB,0x80,0xEF,0xCB,0x39,0x40,0x81,0xFF,0x07};
const uint8_t spONE[]           PROGMEM = {0x66,0x4E,0xA8,0x7A,0x8D,0xED,0xC4,0xB5,0xCD,0x89,0xD4,0xBC,0xA2,0xDB,0xD1,0x27,0xBE,0x33,0x4C,0xD9,0x4F,0x9B,0x4D,0x57,0x8A,0x76,0xBE,0xF5,0xA9,0xAA,0x2E,0x4F,0xD5,0xCD,0xB7,0xD9,0x43,0x5B,0x87,0x13,0x4C,0x0D,0xA7,0x75,0xAB,0x7B,0x3E,0xE3,0x19,0x6F,0x7F,0xA7,0xA7,0xF9,0xD0,0x30,0x5B,0x1D,0x9E,0x9A,0x34,0x44,0xBC,0xB6,0x7D,0xFE,0x1F};
const uint8_t spTWO[]           PROGMEM = {0x06,0xB8,0x59,0x34,0x00,0x27,0xD6,0x38,0x60,0x58,0xD3,0x91,0x55,0x2D,0xAA,0x65,0x9D,0x4F,0xD1,0xB8,0x39,0x17,0x67,0xBF,0xC5,0xAE,0x5A,0x1D,0xB5,0x7A,0x06,0xF6,0xA9,0x7D,0x9D,0xD2,0x6C,0x55,0xA5,0x26,0x75,0xC9,0x9B,0xDF,0xFC,0x6E,0x0E,0x63,0x3A,0x34,0x70,0xAF,0x3E,0xFF,0x1F};
const uint8_t spTHREE[]         PROGMEM = {0x0C,0xE8,0x2E,0x94,0x01,0x4D,0xBA,0x4A,0x40,0x03,0x16,0x68,0x69,0x36,0x1C,0xE9,0xBA,0xB8,0xE5,0x39,0x70,0x72,0x84,0xDB,0x51,0xA4,0xA8,0x4E,0xA3,0xC9,0x77,0xB1,0xCA,0xD6,0x52,0xA8,0x71,0xED,0x2A,0x7B,0x4B,0xA6,0xE0,0x37,0xB7,0x5A,0xDD,0x48,0x8E,0x94,0xF1,0x64,0xCE,0x6D,0x19,0x55,0x91,0xBC,0x6E,0xD7,0xAD,0x1E,0xF5,0xAA,0x77,0x7A,0xC6,0x70,0x22,0xCD,0xC7,0xF9,0x89,0xCF,0xFF,0x03};
const uint8_t spFOUR[]          PROGMEM = {0x08,0x68,0x21,0x0D,0x03,0x04,0x28,0xCE,0x92,0x03,0x23,0x4A,0xCA,0xA6,0x1C,0xDA,0xAD,0xB4,0x70,0xED,0x19,0x64,0xB7,0xD3,0x91,0x45,0x51,0x35,0x89,0xEA,0x66,0xDE,0xEA,0xE0,0xAB,0xD3,0x29,0x4F,0x1F,0xFA,0x52,0xF6,0x90,0x52,0x3B,0x25,0x7F,0xDD,0xCB,0x9D,0x72,0x72,0x8C,0x79,0xCB,0x6F,0xFA,0xD2,0x10,0x9E,0xB4,0x2C,0xE1,0x4F,0x25,0x70,0x3A,0xDC,0xBA,0x2F,0x6F,0xC1,0x75,0xCB,0xF2,0xFF};
const uint8_t spFIVE[]          PROGMEM = {0x08,0x68,0x4E,0x9D,0x02,0x1C,0x60,0xC0,0x8C,0x69,0x12,0xB0,0xC0,0x28,0xAB,0x8C,0x9C,0xC0,0x2D,0xBB,0x38,0x79,0x31,0x15,0xA3,0xB6,0xE4,0x16,0xB7,0xDC,0xF5,0x6E,0x57,0xDF,0x54,0x5B,0x85,0xBE,0xD9,0xE3,0x5C,0xC6,0xD6,0x6D,0xB1,0xA5,0xBF,0x99,0x5B,0x3B,0x5A,0x30,0x09,0xAF,0x2F,0xED,0xEC,0x31,0xC4,0x5C,0xBE,0xD6,0x33,0xDD,0xAD,0x88,0x87,0xE2,0xD2,0xF2,0xF4,0xE0,0x16,0x2A,0xB2,0xE3,0x63,0x1F,0xF9,0xF0,0xE7,0xFF,0x01};
const uint8_t spSIX[]           PROGMEM = {0x04,0xF8,0xAD,0x4C,0x02,0x16,0xB0,0x80,0x06,0x56,0x35,0x5D,0xA8,0x2A,0x6D,0xB9,0xCD,0x69,0xBB,0x2B,0x55,0xB5,0x2D,0xB7,0xDB,0xFD,0x9C,0x0D,0xD8,0x32,0x8A,0x7B,0xBC,0x02,0x00,0x03,0x0C,0xB1,0x2E,0x80,0xDF,0xD2,0x35,0x20,0x01,0x0E,0x60,0xE0,0xFF,0x01};
const uint8_t spSEVEN[]         PROGMEM = {0x0C,0xF8,0x5E,0x4C,0x01,0xBF,0x95,0x7B,0xC0,0x02,0x16,0xB0,0xC0,0xC8,0xBA,0x36,0x4D,0xB7,0x27,0x37,0xBB,0xC5,0x29,0xBA,0x71,0x6D,0xB7,0xB5,0xAB,0xA8,0xCE,0xBD,0xD4,0xDE,0xA6,0xB2,0x5A,0xB1,0x34,0x6A,0x1D,0xA7,0x35,0x37,0xE5,0x5A,0xAE,0x6B,0xEE,0xD2,0xB6,0x26,0x4C,0x37,0xF5,0x4D,0xB9,0x9A,0x34,0x39,0xB7,0xC6,0xE1,0x1E,0x81,0xD8,0xA2,0xEC,0xE6,0xC7,0x7F,0xFE,0xFB,0x7F};
const uint8_t spEIGHT[]         PROGMEM = {0x65,0x69,0x89,0xC5,0x73,0x66,0xDF,0xE9,0x8C,0x33,0x0E,0x41,0xC6,0xEA,0x5B,0xEF,0x7A,0xF5,0x33,0x25,0x50,0xE5,0xEA,0x39,0xD7,0xC5,0x6E,0x08,0x14,0xC1,0xDD,0x45,0x64,0x03,0x00,0x80,0x00,0xAE,0x70,0x33,0xC0,0x73,0x33,0x1A,0x10,0x40,0x8F,0x2B,0x14,0xF8,0x7F};
const uint8_t spNINE[]          PROGMEM = {0xE6,0xA8,0x1A,0x35,0x5D,0xD6,0x9A,0x35,0x4B,0x8C,0x4E,0x6B,0x1A,0xD6,0xA6,0x51,0xB2,0xB5,0xEE,0x58,0x9A,0x13,0x4F,0xB5,0x35,0x67,0x68,0x26,0x3D,0x4D,0x97,0x9C,0xBE,0xC9,0x75,0x2F,0x6D,0x7B,0xBB,0x5B,0xDF,0xFA,0x36,0xA7,0xEF,0xBA,0x25,0xDA,0x16,0xDF,0x69,0xAC,0x23,0x05,0x45,0xF9,0xAC,0xB9,0x8F,0xA3,0x97,0x20,0x73,0x9F,0x54,0xCE,0x1E,0x45,0xC2,0xA2,0x4E,0x3E,0xD3,0xD5,0x3D,0xB1,0x79,0x24,0x0D,0xD7,0x48,0x4C,0x6E,0xE1,0x2C,0xDE,0xFF,0x0F};
const uint8_t spTEN[]           PROGMEM = {0x0E,0x38,0x3C,0x2D,0x00,0x5F,0xB6,0x19,0x60,0xA8,0x90,0x93,0x36,0x2B,0xE2,0x99,0xB3,0x4E,0xD9,0x7D,0x89,0x85,0x2F,0xBE,0xD5,0xAD,0x4F,0x3F,0x64,0xAB,0xA4,0x3E,0xBA,0xD3,0x59,0x9A,0x2E,0x75,0xD5,0x39,0x6D,0x6B,0x0A,0x2D,0x3C,0xEC,0xE5,0xDD,0x1F,0xFE,0xB0,0xE7,0xFF,0x03};

uint32_t ledColors[10]; // array to store LED colors

// Song notes and durations
int lost_woods[20][2] = {
  {65, 200}, {69, 200}, {71, 400},
  {65, 200}, {69, 200}, {71, 400},
  {65, 200}, {69, 200}, {71, 200}, {76, 200}, {74, 400},
  {71, 200}, {72, 200}, {71, 200}, {67, 200}, {64, 900},
  {62, 200}, {64, 200}, {67, 200}, {64, 1000}
};

float midi[127]; // array to store MIDI frequencies
int A_four = 440; // reference frequency for A4

void setup() {
  Serial.begin(9600); // start serial communication
  CircuitPlayground.begin(); // initialize CPX
  pinMode(BUTTON_A_PIN, INPUT); // set button A as input
  pinMode(BUTTON_B_PIN, INPUT); // set button B as input
  pinMode(SWITCH_PIN, INPUT_PULLUP); // set switch as input with pullup

  attachInterrupt(digitalPinToInterrupt(SWITCH_PIN), resetGame, CHANGE); // attach interrupt to switch

  gameOn = true; // game is on
  level = 1; // start at level 1

  CircuitPlayground.clearPixels(); // clear all LEDs

  generateMIDI(); // generate MIDI frequencies
  Serial.println("Game Start"); // print game start message

  startLevel(); // start the first level
}

void loop() {
  if (!gameOn) return; // if game is off, exit loop

  unsigned long currentTime = millis(); // get current time

  if (digitalRead(BUTTON_A_PIN) == HIGH && !buttonAPressed) {  // check if button A is pressed
    buttonAPressed = true;
    nextLevel(); // move to next level
  } else if (digitalRead(BUTTON_A_PIN) == LOW) {
    buttonAPressed = false;
  }

  if (digitalRead(BUTTON_B_PIN) == HIGH && !buttonBPressed) { // check if button B is pressed
    buttonBPressed = true;
    checkSuccess(); // check if the player succeeded
  } else if (digitalRead(BUTTON_B_PIN) == LOW) {
    buttonBPressed = false;
  }

  if (currentTime - previousTime >= interval) { // move the blue LED at the set interval
    previousTime = currentTime;
    moveBlueLED(); // move the blue LED
  }
}

void resetGame() {
  static bool switchState = HIGH; // store previous switch state
  bool currentSwitchState = digitalRead(SWITCH_PIN); // read current switch state

  if (currentSwitchState == LOW && switchState == HIGH) {
    gameOn = false; // turn game off
    CircuitPlayground.clearPixels(); // clear all LEDs
    Serial.println("Game Off"); // print game off message
  } else if (currentSwitchState == HIGH && switchState == LOW) {
    gameOn = true; // turn game on
    level = 1; // reset to level 1
    startLevel(); // start level 1
    Serial.println("Game Reset"); // print game reset message
  }
  switchState = currentSwitchState; // update switch state
}

void nextLevel() {
  if (level < 10) {
    level++; // increment level
    startLevel(); // start the new level
  } else if (level == 10) {
    youWon(); // player won the game
  }
}

void startLevel() {
  Serial.print("Starting Level ");
  Serial.println(level); // print starting level

  showRainbow(); // show rainbow effect
  delay(1000); // wait for 1 second

  // Construct the phrase for announcing the level and start
  const uint8_t* levelSpeech[] = {spONE, spTWO, spTHREE, spFOUR, spFIVE, spSIX, spSEVEN, spEIGHT, spNINE, spTEN};
  CircuitPlayground.speaker.say(spPHASE); // Say "Phase"
  CircuitPlayground.speaker.say(levelSpeech[level - 1]); // Say the level number

  setGreenTargetZone(level); // set the green target zone
  blueLEDPin = 0; // reset blue LED position
  movingRight = true; // start moving right
  interval = 500 - (level - 1) * 40; // adjust interval based on level
  ballHitTheTarget = false; // reset target hit flag
}


void moveBlueLED() {
  CircuitPlayground.clearPixels(); // clear all LEDs
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, ledColors[i]); // set LED colors
  }
  CircuitPlayground.setPixelColor(blueLEDPin, 0, 0, 255); // set blue LED

  if (blueLEDPin == 9) { // update LED movement direction
    movingRight = false;
  } else if (blueLEDPin == 0) {
    movingRight = true;
  }

  if (movingRight) { // move the blue LED
    blueLEDPin++;
  } else {
    blueLEDPin--;
  }
}

void setGreenTargetZone(int level) {
  CircuitPlayground.clearPixels(); // clear all LEDs
  int greenLEDCount = (level == 10) ? 1 : 5 - (level / 2); // set green LED count
  int startLED = (level == 10) ? random(0, 10) : random(0, 10 - greenLEDCount); // random start position
  for (int i = 0; i < 10; i++) {
    ledColors[i] = 0; // clear all LED colors
  }
  for (int i = 0; i < greenLEDCount; i++) {
    ledColors[startLED + i] = 0x00FF00; // set green LEDs
  }
}

void checkSuccess() {
  Serial.println("Checking Success...");
  if (ledColors[blueLEDPin] == 0) {
    gameOver(); // game over if blue LED not on green
  } else if (ledColors[blueLEDPin] == 0x00FF00) {
    Serial.println("Success!"); // print success message
    Serial.println("Play Happy Tune"); // indicate happy tune
    if (level == 10) {
      youWon(); // player won the game
    } else {
      nextLevel(); // move to next level
    }
  }
}

void youWon() {
  Serial.println("You won!"); // print win message
  Serial.println("Play Happy Tune"); // indicate happy tune
  showRainbow(); // show rainbow effect
  
  for (int i = 0; i < 20; i++) { // play Lost Woods
    CircuitPlayground.playTone(midi[lost_woods[i][0]], lost_woods[i][1]);
    delay(1); // slight delay between notes
  }
  CircuitPlayground.speaker.say(spBRAVO);
  delay(100);
  showRainbow(); // show rainbow effect
  Serial.println("Returning to Level 1"); // reset to level 1
  level = 1;
  startLevel();
}

void gameOver() {
  Serial.println("Game Over"); // print game over message
  Serial.println("Play Sad Tune"); // indicate sad tune
  flashRed(); // flash red LEDs
  level = 1; // reset to level 1
  startLevel(); // start level 1
}

void showRainbow() {
  Serial.println("Rainbow called"); // print rainbow called
  uint32_t colors[10] = {
    0xFF0000, 0xFF7F00, 0xFFFF00, 0x00FF00, 0x0000FF,
    0x4B0082, 0x9400D3, 0xFF00FF, 0x00FFFF, 0xFFFFFF
  }; // set rainbow colors
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, colors[i]); // set LEDs to rainbow colors
  }
  delay(500); // wait for 0.5 second
  CircuitPlayground.clearPixels(); // clear all LEDs
}

void flashRed() {
  for (int i = 0; i < 5; i++) {
    CircuitPlayground.clearPixels(); // clear all LEDs
    delay(250); // wait for 0.25 second
    setAllPixels(255, 0, 0); // set all LEDs to red
    delay(250); // wait for 0.25 second
  }
}

void setAllPixels(uint8_t r, uint8_t g, uint8_t b) {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, r, g, b); // set all LEDs to specified color
  }
}

void generateMIDI() {
  for (int i = 0; i < 127; i++) {
    midi[i] = (A_four / 32.0) * pow(2, ((i - 9) / 12.0)); // calculate MIDI frequencies
  }
}
